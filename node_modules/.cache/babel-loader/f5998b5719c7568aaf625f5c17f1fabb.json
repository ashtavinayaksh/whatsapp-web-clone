{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Project\\\\WhatsApp-Clone-React-isnotuploaded on github\\\\src\\\\Chat\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ReactPlayer from \"react-player\"; // importing component\n\nimport DrawerRightInfo from \"./DrawerRightInfo\"; // import DialogCustom from '../shared/DialogCustom';\n//importing material-ui-icon\n\nimport NoEncryptionIcon from \"@material-ui/icons/NoEncryption\";\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\nimport DoneIcon from \"@material-ui/icons/Done\"; //importing styles\n\nimport \"./ChatBody.css\";\n\nfunction ChatBody({\n  roomOwner,\n  roomCreatedBy,\n  messages,\n  user,\n  roomId,\n  isRoomExist\n}) {\n  _s();\n\n  const messagesEndRef = useRef(null); // const { roomId } = useParams();\n\n  const [playing, setPlaying] = useState(false); // const [showDialog, setShowDialog] = useState(false);\n\n  useEffect(() => {\n    //listens when room is changed, then it sets playing to false\n    if (isRoomExist >= 0) {\n      setPlaying(false);\n    }\n  }, [isRoomExist]);\n\n  const handlePlay = () => {\n    setPlaying(true);\n  };\n\n  const handlePause = () => {\n    setPlaying(false);\n  }; // const handleDialogOpen = () => {\n  //     setShowDialog(true);\n  // }\n  // const handleDialogClose = () => {\n  //     setShowDialog(false);\n  // }\n\n\n  const scrollToBottom = () => {\n    if (roomId) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"auto\"\n      });\n    }\n  };\n\n  useEffect(scrollToBottom, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"chat__message_reminder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NoEncryptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), \" This is a whatsapp clone. Messages are not encrpyted.\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"chat__message_reminder chat__createdBy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, roomOwner === user.uid ? \"You created this group\" : `${roomCreatedBy} created this group`), messages.map(message => /*#__PURE__*/React.createElement(\"div\", {\n    key: message.id,\n    className: `chat__message \n                    ${message.uid === user.uid && \"chat__sender\"} \n                    ${message.photo && \"chat__message_media_image\"}\n                    ${message.video && \"chat__message_media_video\"}\n                    ${message.video && !message.caption && \"chat__message_media_video_noCaption\"} `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `chat__name ${message.uid === user.uid && \"chat__name_sender\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, message.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__body_image_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, message.photo ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"\",\n    className: \"chat__body_image\",\n    src: message.photo // onClick={handleDialogOpen}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__body_video_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, message.video ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReactPlayer, {\n    className: \"react-player\",\n    width: \"100%\",\n    height: \"100%\",\n    url: message.video,\n    controls: true,\n    onPlay: handlePlay,\n    onPause: handlePause,\n    onEnded: handlePause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__message_box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat__message_box_text ${message.uid === user.uid && \"chat__message_box_text_sender\"}\n              ${message.photo && !message.caption && \"chat__message_box_text_no_caption\"} `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, message.message ? message.message : null, message.caption ? message.caption : null, message.url ? /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    href: `${message.url}`,\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, message.url) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat__timestamp_container ${message.uid === user.uid && \"chat__timestamp_container_sender\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, message.timestamp ? /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat__timestamp \n                                    ${message.photo && !message.caption && \"chat__timestamp_media_photo\"}  \n                                    ${message.video && !message.caption && \"chat__timestamp_media_video\"}\n                                    ${message.video && !message.caption && playing === true && \"chat__timestamp_media_displayNone\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, new Date(message.timestamp.toDate()).toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    hour12: true,\n    minute: \"numeric\"\n  }), message.uid === user.uid ? /*#__PURE__*/React.createElement(DoneIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 51\n    }\n  }) : null)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__timestamp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    hour12: true,\n    minute: \"numeric\"\n  }), message.uid === user.uid ? /*#__PURE__*/React.createElement(AlarmIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 51\n    }\n  }) : null))))))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ChatBody, \"VsbJX8xr49GOP0UMwaF8X4jRRPE=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["E:/React_Project/WhatsApp-Clone-React-isnotuploaded on github/src/Chat/ChatBody.js"],"names":["React","useEffect","useRef","useState","ReactPlayer","DrawerRightInfo","NoEncryptionIcon","AlarmIcon","DoneIcon","ChatBody","roomOwner","roomCreatedBy","messages","user","roomId","isRoomExist","messagesEndRef","playing","setPlaying","handlePlay","handlePause","scrollToBottom","current","scrollIntoView","behavior","uid","map","message","id","photo","video","caption","name","url","timestamp","Date","toDate","toLocaleTimeString","hour","hour12","minute"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\n// importing component\r\nimport DrawerRightInfo from \"./DrawerRightInfo\";\r\n// import DialogCustom from '../shared/DialogCustom';\r\n//importing material-ui-icon\r\nimport NoEncryptionIcon from \"@material-ui/icons/NoEncryption\";\r\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n//importing styles\r\nimport \"./ChatBody.css\";\r\n\r\nfunction ChatBody({\r\n  roomOwner,\r\n  roomCreatedBy,\r\n  messages,\r\n  user,\r\n  roomId,\r\n  isRoomExist,\r\n}) {\r\n  const messagesEndRef = useRef(null);\r\n  // const { roomId } = useParams();\r\n  const [playing, setPlaying] = useState(false);\r\n  // const [showDialog, setShowDialog] = useState(false);\r\n\r\n  useEffect(() => {\r\n    //listens when room is changed, then it sets playing to false\r\n    if (isRoomExist >= 0) {\r\n      setPlaying(false);\r\n    }\r\n  }, [isRoomExist]);\r\n\r\n  const handlePlay = () => {\r\n    setPlaying(true);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    setPlaying(false);\r\n  };\r\n\r\n  // const handleDialogOpen = () => {\r\n  //     setShowDialog(true);\r\n  // }\r\n\r\n  // const handleDialogClose = () => {\r\n  //     setShowDialog(false);\r\n  // }\r\n\r\n  const scrollToBottom = () => {\r\n    if (roomId) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"auto\" });\r\n    }\r\n  };\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"chat__message_reminder\">\r\n        <NoEncryptionIcon /> This is a whatsapp clone. Messages are not\r\n        encrpyted.\r\n      </p>\r\n      <p className=\"chat__message_reminder chat__createdBy\">\r\n        {roomOwner === user.uid\r\n          ? \"You created this group\"\r\n          : `${roomCreatedBy} created this group`}\r\n      </p>\r\n\r\n      {messages.map((message) => (\r\n        <div\r\n          key={message.id}\r\n          className={`chat__message \r\n                    ${message.uid === user.uid && \"chat__sender\"} \r\n                    ${message.photo && \"chat__message_media_image\"}\r\n                    ${message.video && \"chat__message_media_video\"}\r\n                    ${\r\n                      message.video &&\r\n                      !message.caption &&\r\n                      \"chat__message_media_video_noCaption\"\r\n                    } `}\r\n        >\r\n          <span\r\n            className={`chat__name ${\r\n              message.uid === user.uid && \"chat__name_sender\"\r\n            }`}\r\n          >\r\n            {message.name}\r\n          </span>\r\n\r\n          <div className=\"chat__body_image_container\">\r\n            {message.photo ? (\r\n              <>\r\n                <img\r\n                  alt=\"\"\r\n                  className=\"chat__body_image\"\r\n                  src={message.photo}\r\n                  // onClick={handleDialogOpen}\r\n                />\r\n\r\n                {/* <DialogCustom \r\n                                    open={showDialog}\r\n                                    close={handleDialogClose}\r\n                                    photo={message.photo}\r\n                                    user={user}\r\n                                /> */}\r\n              </>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"chat__body_video_container\">\r\n            {message.video ? (\r\n              <>\r\n                <div className=\"player-wrapper\">\r\n                  <ReactPlayer\r\n                    className=\"react-player\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    url={message.video}\r\n                    controls={true}\r\n                    onPlay={handlePlay}\r\n                    onPause={handlePause}\r\n                    onEnded={handlePause}\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"chat__message_box\">\r\n            <div\r\n              className={`chat__message_box_text ${\r\n                message.uid === user.uid && \"chat__message_box_text_sender\"\r\n              }\r\n              ${\r\n                message.photo &&\r\n                !message.caption &&\r\n                \"chat__message_box_text_no_caption\"\r\n              } `}\r\n            >\r\n              {message.message ? message.message : null}\r\n              {message.caption ? message.caption : null}\r\n              {message.url ? (\r\n                <a\r\n                  target=\"_blank\"\r\n                  href={`${message.url}`}\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {message.url}\r\n                </a>\r\n              ) : null}\r\n\r\n              <div\r\n                className={`chat__timestamp_container ${\r\n                  message.uid === user.uid && \"chat__timestamp_container_sender\"\r\n                }`}\r\n              >\r\n                {message.timestamp ? (\r\n                  <div\r\n                    className={`chat__timestamp \r\n                                    ${\r\n                                      message.photo &&\r\n                                      !message.caption &&\r\n                                      \"chat__timestamp_media_photo\"\r\n                                    }  \r\n                                    ${\r\n                                      message.video &&\r\n                                      !message.caption &&\r\n                                      \"chat__timestamp_media_video\"\r\n                                    }\r\n                                    ${\r\n                                      message.video &&\r\n                                      !message.caption &&\r\n                                      playing === true &&\r\n                                      \"chat__timestamp_media_displayNone\"\r\n                                    }`}\r\n                  >\r\n                    <span>\r\n                      {new Date(message.timestamp.toDate()).toLocaleTimeString(\r\n                        \"en-US\",\r\n                        {\r\n                          hour: \"numeric\",\r\n                          hour12: true,\r\n                          minute: \"numeric\",\r\n                        }\r\n                      )}\r\n                      {message.uid === user.uid ? <DoneIcon /> : null}\r\n                    </span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"chat__timestamp\">\r\n                    <span>\r\n                      {new Date().toLocaleTimeString(\"en-US\", {\r\n                        hour: \"numeric\",\r\n                        hour12: true,\r\n                        minute: \"numeric\",\r\n                      })}\r\n                      {message.uid === user.uid ? <AlarmIcon /> : null}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      {/* it will automatically scroll drown everytime the user enters new chat message */}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}